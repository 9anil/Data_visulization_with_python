# -*- coding: utf-8 -*-
"""Histogram_Bargraph_with_matplot_seaborn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g7PUCJsTkgi_W_S5jYHdK9Uo0zNF8stF
"""

# Histogram: A histogram represents the distribution of data by forming bins along the range of the data and then drawing bars to show the number of observations that fall in each bin.
# We can use plt.hist function to create histogram.
import matplotlib.pyplot as plt
import seaborn as srn
iris_data=srn.load_dataset('iris')
print(iris_data)

iris_data.describe()

srn.set_style('darkgrid')
plt.title("Distribution of Sepal Width")
plt.hist(iris_data.sepal_width);

# Controlling the size and number of bins - byusing bins argument.
plt.title("Distribution of Sepal Width")
plt.hist(iris_data.sepal_width,bins=5)

# Specifyingthe boundaries of each bin
import numpy as np
plt.title("Distribution of Sepal Width")
plt.hist(iris_data.sepal_width,bins=np.arange(2,5,0.25))

# Bins of unequal sizes
plt.title("Distribution of Sepal Width")
plt.hist(iris_data.sepal_width,bins=[1,3,4,4.5])

# Multiple Histograms: Similar to line chart we can drow multiple histogram in a single chart. We can reduce the opacity of each histogram
# Let's draw separate histograms for each species of flowers.
setosa_data=iris_data[iris_data.species=='setosa']
versicolor_data=iris_data[iris_data.species=='versicolor']
virginica_data=iris_data[iris_data.species=='virginica']
print(setosa_data)
#print(versicolor_data)
#print(virginica_data)

plt.title("Compairing distribution of Sepal Width")
plt.hist(setosa_data.sepal_width,alpha=0.4,bins=np.arange(2,5,0.25))
plt.hist(versicolor_data.sepal_width,alpha=0.4,bins=np.arange(2,5,0.25))
plt.legend(['Setosa','Versicolor'])



# We can also stacks multiple histograms on top of one another.
plt.figure(figsize=(10,6))
plt.title("Distribution of Sepal Width")
plt.hist([setosa_data.sepal_width,versicolor_data.sepal_width,virginica_data.sepal_width],bins=np.arange(2,5,0.25),stacked=True)
plt.legend(['Setosa','Versicolor','Verginica'])

# Bar Chart: Bar chart quite similar to line chart,i.e. they show a sequence of values, however a bar is shown for each value rather then pointsconnected by lines.
# We can use the plt.bar to draw a bar chart
year=range(2000,2006)
apples=[0.35,0.6,0.9,0.8,0.65,0.85]
oranges=[0.4,0.8,0.65,0.9,0.7,0.83]
plt.bar(year,apples)
plt.title("Bar Chart for apple yield")

plt.bar(year,apples)
plt.plot(year,apples,'o-r')
plt.title("Bar Chart and line chart for apple yield")

# Like histogram , bar chart can also be stacked on top of the one another.We can use the bottom argument to plt.bar to achive this.
plt.bar(year,apples)
plt.bar(year,oranges,bottom=apples)
plt.legend(['Apples',"Oranges"])
plt.xlabel("Years")
plt.ylabel("Yields in tons")

# Bar plots with averages: Let's looks another sample dataset included with seaborn called 'tips'
tips_data=srn.load_dataset('tips')
print(tips_data)

# We might want to draw a bar chart to visulize how the average bill amount varies across different days of the week.One way to do this would be to compute the day-wise
# average and then plt.bar
days=['Thu','Fri','Sat','Sun']
avg_total_bill=[15.5,13.7,12.6,17.8]
plt.bar(days,avg_total_bill)

# The seaborn library provides a .barplot function which can automatically compute averages.
srn.barplot(x='day',y='total_bill',data=tips_data)

# We can also specify a hue argument to compare bar plot side by side based on a third feature
srn.barplot(x='day',y='total_bill',hue='sex',data=tips_data)

# Make the bars horizontal simply by switching the axes.
srn.barplot(x='total_bill',y='day',hue='sex',data=tips_data)